# -*- coding: utf-8 -*-
"""Download ISIC2018.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hATNECzcCb688vucXPGQs2AJOQahqfuo
"""

from extra.utils import (
  load_config,
  _print,
)
import json
import importlib
from datasets import (
  ISIC2018Dataset
)
from .models.unet import UNET


# # training
# !wget https://isic-challenge-data.s3.amazonaws.com/2018/ISIC2018_Task1-2_Training_Input.zip
# !unzip -q ISIC2018_Task1-2_Training_Input.zip
# !wget https://isic-challenge-data.s3.amazonaws.com/2018/ISIC2018_Task1_Training_GroundTruth.zip
# !unzip -q ISIC2018_Task1_Training_GroundTruth.zip

# # validation
# !wget https://isic-challenge-data.s3.amazonaws.com/2018/ISIC2018_Task1-2_Validation_Input.zip
# !unzip -q ISIC2018_Task1-2_Validation_Input.zip
# !wget https://isic-challenge-data.s3.amazonaws.com/2018/ISIC2018_Task1_Validation_GroundTruth.zip
# !unzip -q ISIC2018_Task1_Validation_GroundTruth.zip

# # test
# !wget https://isic-challenge-data.s3.amazonaws.com/2018/ISIC2018_Task1-2_Test_Input.zip
# !unzip -q ISIC2018_Task1-2_Test_Input.zip


# ------ load the config file ------
config = load_config("./configs/default.yaml")
_print("Config:", "info_underline")
print(json.dumps(config, indent=2))
print(20*"~-", "\n")



"""# Dataset"""

import torch
from torch.utils.data.dataset import Dataset  # For custom data-sets
from torchvision import transforms
from PIL import Image
import glob



from __future__ import print_function, division
import os
import torch
import pandas as pd
from skimage import io, transform
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.image import imread
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms, utils

# Ignore warnings
import warnings
warnings.filterwarnings("ignore")

plt.ion()   # interactive mode


"""# Train

## imports
"""

import numpy as np
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

import os
os.environ["CUDA_VISIBLE_DEVICES"] = "0"
import torch
# from sklearn.model_selection import train_test_split
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
import pandas as pd
import glob
import numpy as np
import copy

import torch
from torch.utils.data.dataset import Dataset  # For custom data-sets
from torchvision import transforms
from PIL import Image
import glob



# Ignore warnings
import warnings
warnings.filterwarnings("ignore")

"""## make dataset"""

test_dataset = ISIC2018Dataset(**config['dataset']['test']['params'])
test_dataloader = DataLoader(test_dataset, **config['data_loader']['test'])
print(f"Length of test_dataset:\t{len(test_dataset)}")

"""## model"""

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
Net = globals()[f"{config['model']['name']}"](**config['model']['params'])
torch.load(Net, 'basemodel.pth')
Net.eval().to(device)
criterion = nn.NLLLoss()

"""## Test"""

steps = 0
running_loss = 0
print_every = 10
test_loss = 0
accuracy = 0

with torch.no_grad():
    for batch in test_dataloader:
        imgs = batch['x']
        labels = batch['y']
        imgs, labels = imgs.to(device), labels.to(device)
        preds = Net.forward(imgs)
        batch_loss = criterion(preds, labels)
        test_loss += batch_loss.item()
        
        ps = torch.exp(preds)
        top_p, top_class = ps.topk(1, dim=1)
        equals = top_class == labels.view(*top_class.shape)
        accuracy += torch.mean(equals.type(torch.FloatTensor)).item()

print(
    f"Test loss:\t{test_loss/len(test_dataloader):.3f} "
    f"Test accuracy:\t{accuracy/len(test_dataloader):.3f}"
)



